"""Database schema initialization script."""

import logging
from typing import Dict, Any

logger = logging.getLogger(__name__)

def get_initialization_queries(schema: str) -> Dict[str, str]:
    """Return all initialization queries organized by type."""
    return {
        'extensions': """
            CREATE EXTENSION IF NOT EXISTS pg_trgm;
            CREATE EXTENSION IF NOT EXISTS vector;
        """,
        
        'schema': f"""
            CREATE SCHEMA IF NOT EXISTS {schema};
        """,
        
        'tables': [
            # Clinical trials feed table
            f"""
            CREATE TABLE IF NOT EXISTS {schema}.clinical_trials_feed (
                id SERIAL NOT NULL,
                nct_id CHARACTER VARYING(255) NOT NULL,
                brief_title TEXT NULL,
                official_title TEXT NULL,
                overall_status CHARACTER VARYING(100) NULL,
                enrollment INTEGER NULL,
                enrollment_type CHARACTER VARYING(50) NULL,
                study_type CHARACTER VARYING(100) NULL,
                phase CHARACTER VARYING(50) NULL,
                start_date DATE NULL,
                completion_date DATE NULL,
                primary_completion_date DATE NULL,
                verification_date DATE NULL,
                last_update_submitted_date DATE NULL,
                why_stopped TEXT NULL,
                description TEXT NULL,
                eligibility_criteria TEXT NULL,
                eligibility_population TEXT NULL,
                sponsor_name CHARACTER VARYING(255) NULL,
                outcomes TEXT NULL,
                search_text TEXT NULL,
                created_at TIMESTAMP WITH TIME ZONE NULL DEFAULT CURRENT_TIMESTAMP,
                updated_at TIMESTAMP WITH TIME ZONE NULL DEFAULT CURRENT_TIMESTAMP,
                CONSTRAINT clinical_trials_feed_pkey PRIMARY KEY (id),
                CONSTRAINT clinical_trials_feed_nct_id_key UNIQUE (nct_id)
            );
            """,

            # Publications feed table
            f"""
            CREATE TABLE IF NOT EXISTS {schema}.publications_feed (
                publication_id BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
                created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
                title TEXT NULL,
                abstract TEXT NULL,
                publication_creation_date DATE NULL,
                journal_name TEXT NULL,
                doi TEXT NULL,
                pdf_url TEXT NULL,
                has_fulltext BOOLEAN NULL,
                openalex_work_id TEXT NULL,
                CONSTRAINT publications_feed_pkey PRIMARY KEY (publication_id)
            );
            """,

            # Conversation history table
            f"""
            CREATE TABLE IF NOT EXISTS {schema}.conversation_history (
                id SERIAL NOT NULL,
                query TEXT NOT NULL,
                response TEXT NOT NULL,
                model CHARACTER VARYING(50) NOT NULL,
                created_at TIMESTAMP WITH TIME ZONE NULL DEFAULT NOW(),
                CONSTRAINT conversation_history_pkey PRIMARY KEY (id)
            );
            """,

            # Text embeddings table
            f"""
            CREATE TABLE IF NOT EXISTS {schema}.text_embeddings (
                id SERIAL NOT NULL,
                source_table CHARACTER VARYING(50) NOT NULL,
                source_id INTEGER NOT NULL,
                field_name CHARACTER VARYING(50) NOT NULL,
                embedding VECTOR NULL,
                created_at TIMESTAMP WITH TIME ZONE NULL DEFAULT CURRENT_TIMESTAMP,
                CONSTRAINT text_embeddings_pkey PRIMARY KEY (id),
                CONSTRAINT text_embeddings_source_table_source_id_field_name_key 
                    UNIQUE (source_table, source_id, field_name),
                CONSTRAINT check_source_table CHECK (
                    source_table::text = ANY (ARRAY[
                        'clinical_trials_feed'::CHARACTER VARYING,
                        'publications_feed'::CHARACTER VARYING
                    ]::text[])
                )
            );
            """
        ],
        
        'indexes': [
            # Clinical Trials indexes
            f"""
            CREATE INDEX IF NOT EXISTS idx_clinical_trials_sponsor 
            ON {schema}.clinical_trials_feed(sponsor_name);
            """,
            f"""
            CREATE INDEX IF NOT EXISTS idx_clinical_trials_search 
            ON {schema}.clinical_trials_feed USING gin(to_tsvector('english', search_text));
            """,

            # Publications feed indexes
            f"""
            CREATE INDEX IF NOT EXISTS idx_publications_feed_doi
            ON {schema}.publications_feed(doi);
            """,
            f"""
            CREATE INDEX IF NOT EXISTS idx_publications_feed_openalex_id
            ON {schema}.publications_feed(openalex_work_id);
            """,
            f"""
            CREATE INDEX IF NOT EXISTS idx_publications_feed_created
            ON {schema}.publications_feed(created_at DESC);
            """,
            f"""
            CREATE INDEX IF NOT EXISTS idx_publications_feed_pub_date
            ON {schema}.publications_feed(publication_creation_date DESC);
            """,

            # Text embeddings indexes
            f"""
            CREATE INDEX IF NOT EXISTS idx_embeddings_vector 
            ON {schema}.text_embeddings USING ivfflat (embedding vector_cosine_ops);
            """
        ]
    }

def initialize_schema(conn: Any, schema: str) -> None:
    """Initialize the database schema and all its objects.
    
    Args:
        conn: Database connection object
        schema: Schema name to initialize
    """
    queries = get_initialization_queries(schema)
    
    with conn.cursor() as cur:
        try:
            # Create extensions
            cur.execute(queries['extensions'])
            logger.info("Created required extensions")
            
            # Create schema
            cur.execute(queries['schema'])
            logger.info(f"Created schema '{schema}'")
            
            # Create tables
            for query in queries['tables']:
                cur.execute(query)
            logger.info("Created all tables")
            
            # Create indexes
            for query in queries['indexes']:
                cur.execute(query)
            logger.info("Created all indexes")
            
        except Exception as e:
            logger.warning(f"Schema initialization failed: {str(e)}")
            raise
        